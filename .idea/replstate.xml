<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1483388743661">{:repl-history {:ide [], :local [&quot;birds&quot; &quot;wonderland.recursion/hello&quot; &quot;wonderland.recursion/birds&quot; &quot;(reduce (fn [r x] (if nil? x) r (conj r x)) [] [:duck nil :bird :mouse]))&quot; &quot;(reduce (fn [r x] (if nil? x) r (conj r x)) [] [:duck nil :bird :mouse])&quot; &quot;(reduce (fn [r x] (if nil? x) r (conj r x)) \n        [] \n        [:duck nil :bird :mouse])&quot; &quot;()&quot; &quot;((reduce (fn [r x] (if nil? x) r (conj r x))\n         []\n         [:duck nil :bird :mouse])) (reduce (fn [r x] (if nil? x) r (conj r x)) \n                                            \n                                            \n                                            \n        [] \n        [:duck nil :bird :mouse])&quot; &quot;(reduce (fn [r x] (if ( nil? x)) r (conj r x)) \n        [] \n        [:duck nil :bird :mouse])&quot; &quot;(reduce (fn [r x] (if ( nil? x) r (conj r x)))\n        [] \n        [:duck nil :bird :mouse])&quot; &quot;(doc complement\n     )&quot; &quot;((complement empty?)[1 2 3 4])&quot; &quot;((complement nil?)[1 2 3 4])&quot; &quot;((complement first)[1 2 3 4])&quot; &quot;(doc first)&quot; &quot;(doc nil?)&quot; &quot;(doc empty?)&quot; &quot;(def animals  [:duck nil :bird :mouse]\n  )&quot; &quot;(filter (complement nil?) animals)&quot; &quot;((complement nil?)[:duck])&quot; &quot;((remove nil?) animals)&quot; &quot;(remove nil? animals)&quot; &quot;(for [animal animals]\n  (str \&quot;hello \&quot; animal))&quot; &quot;(remove nil? animals (for [animal animals]\n  (str \&quot;hello \&quot; animal)))&quot; &quot;(remove nil? animals)\n(for [animal animals]\n  \n  (str \&quot;hello \&quot; animal))&quot; &quot;(remove nil? animals\n(for [animal animals]\n  \n  (str \&quot;hello \&quot; animal))&quot; &quot;(remove nil? animals\n        \n(for [animal animals]\n\n  (str \&quot;hello \&quot; animal))&quot; &quot;(remove nil? animals\n        \n(for [animal animals]\n\n  (str \&quot;hello \&quot; animal)))&quot; &quot;(let [animals-rem (remove nil? animals)\n        \n(for [animal animals-rem]\n\n  (str \&quot;hello \&quot; animal))])&quot; &quot;(let [animals-rem (remove nil? animals)] animals-rem)&quot; &quot;(let [animals-rem (remove nil? animals)]\n        \n(for [animal animals-rem]\n\n  (str \&quot;hello \&quot; animal)))&quot; &quot;(let [animals-rem (remove nil? animals)]\n        \n(for [animal animals-rem\n      colour [:red :blue]]\n  \n\n  (str \&quot;hello \&quot; animal colour)))&quot; &quot;(defn foo\n  ([] 10)\n  ([x] x)\n  ([x y] (+ x y)))&quot; &quot;(foo\n  )&quot; &quot;(foo\n   44\n   )&quot; &quot;(foo 8 9\n     )&quot; &quot;(foo 8 9 9\n     \n     )&quot; &quot;(for [animals-rem (remove nil? animals)]\n\n  \n\n  (str \&quot;hello \&quot; animals-rem colour)))&quot; &quot;(for [animals-rem (remove nil? animals)]\n\n  \n\n  (str \&quot;hello \&quot; animals-rem colour))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]]\n  \n\n  \n\n  (str \&quot;hello \&quot; animals-rem colour))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]]\n  (println animals-rem)\n  \n\n  \n\n  (str \&quot;hello \&quot; animals-rem colour))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]]\n  (do(println animals-rem)\n  \n\n  \n\n  (str \&quot;hello \&quot; animals-rem colour)))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]\n      :let [animal-str (str \&quot;i am \&quot; animals-rem )]]\n  (do(println animals-rem)\n  \n\n  \n\n  (str \&quot;hello \&quot; animals-str colour)))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]\n      :let [animal-str (str \&quot;i am \&quot; animals-rem )]]\n  \n  (do(println animals-rem)\n  \n\n  \n\n  (str \&quot;hello \&quot; animals-str colour)))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]\n      :let [animal-str (str \&quot;i am \&quot; animals-rem )]]\n  (do(println animals-rem)\n     \n  (str \&quot;hello \&quot; animal-str colour)))&quot; &quot;(for [animals-rem (remove nil? animals)\n      colour [:blue :green]\n      :let [animal-str (str \&quot;i am \&quot; animals-rem )]\n      :when (= colour :blue)]\n  \n  (do(println animals-rem)\n     \n  (str \&quot;hello \&quot; animal-str colour)))&quot; &quot;[:blue :green [:orange :pink {:green}]]&quot; &quot;[:blue :green [:orange :pink #{:green}]]&quot; &quot;(flatten \n  [:blue :green [:orange :pink #{:green}]])&quot; &quot;(flatten \n  [:blue :green [:orange :pink (:green)]])&quot; &quot;(flatten \n  [:blue :green [:orange :pink '(:green)]])&quot; &quot;(into {} [1 2 2 4 5])&quot; &quot;(into seq [1 2 2 4 5])&quot; &quot;(into #{\n        \n        } [1 2 2 4 5])&quot; &quot;(vec 'animals)&quot; &quot;animals&quot; &quot;(vec \n  animals)&quot; &quot;{a: 1 b: 2 d: 4 c: 3}&quot; &quot;(def sorted #{a: 1 b: 2 d: 4 c: 3})&quot; &quot;(def sorted #{:a 1 :b 2 :d 4 :c 3})&quot; &quot;(def sorted \n  {:a 1 :b 2 :d 4 :c 3})&quot; &quot;(into [] sorted)&quot; &quot;(flatten (into [] sorted))&quot; &quot;(first (flatten (into [] sorted)))&quot; &quot;(partition 3 [1 2 3 4 5 6 7\n              \n              ])&quot; &quot;(partition-all 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(doc \n  partition-by)&quot; &quot;(partition-by 3\n              [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by \n              [1 2 3 4 5 6 7 8 9 10])&quot; &quot;              1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by #(+ 1) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by #(/ 1 % ) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by #(/ 4 % ) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by #(= % 6) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(def who-atom (atom :caterpiller))&quot; &quot;who-atom&quot;], :remote []}}</component>
</project>